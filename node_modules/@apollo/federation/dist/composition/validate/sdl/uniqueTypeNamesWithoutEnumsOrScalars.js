"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
function duplicateTypeNameMessage(typeName) {
    return `There can be only one type named "${typeName}".`;
}
exports.duplicateTypeNameMessage = duplicateTypeNameMessage;
function existedTypeNameMessage(typeName) {
    return `Type "${typeName}" already exists in the schema. It cannot also be defined in this type definition.`;
}
exports.existedTypeNameMessage = existedTypeNameMessage;
function UniqueTypeNamesWithoutEnumsOrScalars(context) {
    const knownTypeNames = Object.create(null);
    const schema = context.getSchema();
    return {
        ObjectTypeDefinition: checkTypeName,
        InterfaceTypeDefinition: checkTypeName,
        UnionTypeDefinition: checkTypeName,
        InputObjectTypeDefinition: checkTypeName,
    };
    function checkTypeName(node) {
        const typeName = node.name.value;
        if (schema && schema.getType(typeName)) {
            context.reportError(new graphql_1.GraphQLError(existedTypeNameMessage(typeName), node.name));
            return;
        }
        if (knownTypeNames[typeName]) {
            context.reportError(new graphql_1.GraphQLError(duplicateTypeNameMessage(typeName), [
                knownTypeNames[typeName],
                node.name,
            ]));
        }
        else {
            knownTypeNames[typeName] = node.name;
        }
        return false;
    }
}
exports.UniqueTypeNamesWithoutEnumsOrScalars = UniqueTypeNamesWithoutEnumsOrScalars;
//# sourceMappingURL=uniqueTypeNamesWithoutEnumsOrScalars.js.map