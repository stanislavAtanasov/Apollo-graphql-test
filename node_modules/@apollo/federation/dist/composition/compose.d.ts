import 'apollo-server-env';
import 'apollo-env';
import { GraphQLSchema, GraphQLError } from 'graphql';
import { ServiceDefinition, ServiceName, ExternalFieldDefinition, ServiceNameToKeyDirectivesMap, FederatedTypeDefinitionNode, FederatedTypeExtensionNode } from './types';
interface DefinitionsMap {
    [name: string]: FederatedTypeDefinitionNode[];
}
interface ExtensionsMap {
    [name: string]: FederatedTypeExtensionNode[];
}
interface TypeToServiceMap {
    [typeName: string]: {
        serviceName?: ServiceName;
        extensionFieldsToOwningServiceMap: {
            [fieldName: string]: string;
        };
    };
}
export interface KeyDirectivesMap {
    [typeName: string]: ServiceNameToKeyDirectivesMap;
}
export declare function buildMapsFromServiceList(serviceList: ServiceDefinition[]): {
    typeToServiceMap: TypeToServiceMap;
    definitionsMap: DefinitionsMap;
    extensionsMap: ExtensionsMap;
    externalFields: ExternalFieldDefinition[];
    keyDirectivesMap: KeyDirectivesMap;
};
export declare function buildSchemaFromDefinitionsAndExtensions({ definitionsMap, extensionsMap, }: {
    definitionsMap: DefinitionsMap;
    extensionsMap: ExtensionsMap;
}): {
    schema: GraphQLSchema;
    errors: GraphQLError[];
};
export declare function addFederationMetadataToSchemaNodes({ schema, typeToServiceMap, externalFields, keyDirectivesMap, }: {
    schema: GraphQLSchema;
    typeToServiceMap: TypeToServiceMap;
    externalFields: ExternalFieldDefinition[];
    keyDirectivesMap: KeyDirectivesMap;
}): void;
export declare function composeServices(services: ServiceDefinition[]): {
    schema: GraphQLSchema;
    errors: GraphQLError[];
};
export {};
//# sourceMappingURL=compose.d.ts.map